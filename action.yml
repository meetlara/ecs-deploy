name: "Build image and deploy to ECS"
description: "Builds de image, uploads to ECR, updates the task definition and deploys new service on ECS"
inputs:
  aws_access_key_id:
    description: AWS Key ID
    required: true
  aws_secret_access_key:
    description: AWS Secret Access Key
    required: true
  ecr_image_name:
    description: Define the name of the ECR image registry
    required: true
  ecr_image_tag:
    description: Define the tag of the image
    required: true
  task_definition_container_name:
    description: Define the name of the container in the Task Definition
    required: true
  ecs_service_name:
    description: Define the name of the ECS Service
    required: true
  ecs_cluster_name:
    description: Define the name of the ECS Cluster
    required: true
  task_definition_path:
    description: Define the path to the Task Definition
    required: true
  build_working_directory:
    description: Define the path of working directory of code to build Docker image
    required: true
  docker_build_extra_args:
    description: Define the extra arguments that you will set to docker build command
    required: false
    default: ""
  with_testing_db:
    description: Wether is necessary a testing db or not
    required: false
    default: "false"
  db_schemas:
    description: DB schemas list to create separated by a space
    required: false

runs:
  using: "composite"
  steps:
    - name: Set up test db
      id: set-up-test-db
      if: ${{ inputs.with_testing_db == 'true' }}
      uses: meetlara/set-up-test-db@main
      with:
        db_schemas: ${{ inputs.db_schemas }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # This is a separate action that sets up buildx runner
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    # So now you can use Actions' own caching!
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build, tag, and push image to Amazon ECR
      shell: bash
      id: build-image
      working-directory: ${{ inputs.build_working_directory }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_NAME: ${{ inputs.ecr_image_name }}
        IMAGE_TAG: ${{ inputs.ecr_image_tag }}
      run: |
        cache_commit=$(aws ecr describe-images --repository-name stg-chats-service-api --query "[imageDetails[?imageTags[0]=='$IMAGE_TAG'].imageTags[0]][] | [0]" --output=text)
        echo "Got latest docker image on repository. Tag: $cache_commit"
        
        if [ $cache_commit = $IMAGE_TAG ]; then
            echo "Already existed image; skipping."
        else
          tmp_dir=" /tmp/ecs-deploy-$(date +%s)"
          
          /usr/bin/docker buildx build --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new ${{ inputs.docker_build_extra_args }} --iidfile $tmp_dir/iidfile --tag $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG --metadata-file $tmp_dir/metadata-file --push .

          rm -rf $tmp_dir
          
          # This ugly bit is necessary if you don't want your cache to grow forever
          # until it hits GitHub's limit of 5GB.
          # Temp fix
          # https://github.com/docker/build-push-action/issues/252
          # https://github.com/moby/buildkit/issues/1896
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        fi

        echo "::set-output name=image::$ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ inputs.task_definition_path }}
        container-name: ${{ inputs.task_definition_container_name }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_image_name }}:${{ inputs.ecr_image_tag }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ inputs.ecs_service_name }}
        cluster: ${{ inputs.ecs_cluster_name }}
